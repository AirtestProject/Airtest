# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Game-Netease
# This file is distributed under the same license as the airtest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: airtest \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-28 21:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../all_module/airtest.core.win.ctypesinput.rst:2
msgid "airtest.core.win.ctypesinput module"
msgstr ""

#: airtest.core.win.ctypesinput:1 of
msgid ""
"MagicMock is a subclass of Mock with default implementations of most of "
"the magic methods. You can use MagicMock without having to configure the "
"magic methods yourself."
msgstr ""

#: airtest.core.win.ctypesinput:5 of
msgid ""
"If you use the `spec` or `spec_set` arguments then *only* magic methods "
"that exist in the spec will be created."
msgstr ""

#: airtest.core.win.ctypesinput:8 of
msgid ""
"Attributes and the return value of a `MagicMock` will also be "
"`MagicMocks`."
msgstr ""

#~ msgid "基类：:class:`_ctypes.Structure`"
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "Bases: :class:`_ctypes.Structure`"
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "Contains information about a simulated keyboard event."
#~ msgstr ""

#~ msgid "Structure/Union member"
#~ msgstr ""

#~ msgid "Contains information about a simulated mouse event."
#~ msgstr ""

#~ msgid ""
#~ "Contains information about a simulated "
#~ "message generated by an input device "
#~ "other than a keyboard or mouse."
#~ msgstr ""

#~ msgid ""
#~ "Used by SendInput to store information"
#~ " for synthesizing input events such "
#~ "as keystrokes, mouse movement, and mouse"
#~ " clicks."
#~ msgstr ""

#~ msgid "Simulates a key press event."
#~ msgstr ""

#~ msgid ""
#~ "Sends a scancode to the computer "
#~ "to report which key has been "
#~ "pressed. Some games use DirectInput "
#~ "devices, and respond only to scancodes,"
#~ " not virtual key codes. You can "
#~ "simulate DirectInput key presses using "
#~ "this method, instead of the "
#~ "keyevent(...) method, which uses virtual "
#~ "key codes."
#~ msgstr ""

#~ msgid ""
#~ "A string indicating which key to "
#~ "be pressed. Available key options are"
#~ " listed in KEYS and EXTENDED_KEYS."
#~ msgstr ""

#~ msgid "Simulates a key release event."
#~ msgstr ""

#~ msgid ""
#~ "Sends a scancode to the computer "
#~ "to report which key has been "
#~ "released. Some games use DirectInput "
#~ "devices, and respond only to scancodes,"
#~ " not virtual key codes. You can "
#~ "simulate DirectInput key releases using "
#~ "this method. A call to the "
#~ "key_release(...) method usually follows a "
#~ "call to the key_press(..) method of "
#~ "the same key."
#~ msgstr ""

#~ msgid "A string indicating which key to be released."
#~ msgstr ""

#~ msgid "Simulates a key press/release event with SendInput."
#~ msgstr ""

#~ msgid "Scancode of the particular key to be pressed/released in hexadecimal."
#~ msgstr ""

#~ msgid "Flags indicating various aspects of the keystroke."
#~ msgstr ""

